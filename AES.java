/* 
Jonathan Healy
SENG 360 UVIC
V00845624
*/

import java.util.Scanner;
import java.io.*;

public class AES
{
    /*Rijndael S-BOX*/
    private static final char sbox[] =
    { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe,
    0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72,
    0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04,
    0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c,
    0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20,
    0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33,
    0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
    0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e,
    0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde,
    0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4,
    0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba,
    0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5,
    0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69,
    0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42,
    0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
    
    /*Inverted Rijndael S-BOX*/
    private static final char rsbox[] =
    { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81,
    0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9,
    0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08,
    0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6,
    0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd,
    0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3,
    0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
    0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf,
    0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c,
    0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe,
    0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f,
    0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f,
    0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae,
    0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6,
    0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
    
    /*Lookup Table for multiplying by 2 in Galois' finite field*/
    private static final char rMix2[] =
    {0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5};
    
    /*Lookup Table for multiplying by 3 in Galois' finite field*/
    private static final char rMix3[] =
    {0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a};
    
    /*Lookup Table for multiplying by 9 in Galois' finite field*/
    private static final char rMix9[] =
    {0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65,0x7e, 0x77, 0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a,
        0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 0xec, 0xe5, 0xfe, 0xf7,0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b, 0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46};
    
    /*Lookup Table for multiplying by 11 in Galois' finite field*/
    private static final char rMix11[] =
    {0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
    0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
    0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
    0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
    0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
    0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
    0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
    0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
    0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
    0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
    0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
    0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
    0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
    0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
    0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
    0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3};
    
    /*Lookup Table for multiplying by 13 in Galois' finite field*/
    private static final char rMix13[] =
    {0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
    0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
    0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
    0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
    0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
    0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
    0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
    0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
    0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
    0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
    0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
    0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
    0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
    0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
    0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
    0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97};
    
    /*Lookup Table for multiplying by 14 in Galois' finite field*/
    private static final char rMix14[] =
    {0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
    0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
    0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
    0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
    0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
    0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
    0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
    0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
    0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
    0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
    0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
    0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
    0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
    0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
    0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
    0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d};
    
    public static final int[] rcon =
    {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb};

    /*Global Variations*/
    static char[] keyFin = new char[16];
    static int iteration = 1;
    static char[][] expandKey = new char[60][4];
    static char[][] finExKey = new char[15][16];
    static char[] finEncrypt = new char[16];
    static char[] finDecrypt = new char[16];
    char[][] output7 = new char[16][16];
    
    /*Expanded Key takes the key and makes variations of it to use in the addRoundKey function*/
    static void expandedKey(char[] bKey){
        int j = 0;
       // printP(bKey,32);
        for(int i=0; i<4;i++)
            expandKey[0][i%4] = bKey[i];
          //  printP(expandKey[0],4);
        for(int i=4; i<8;i++)
            expandKey[1][i%4] = bKey[i];
          //  printP(expandKey[1],4);
        for(int i=0; i<12;i++)
            expandKey[2][i%4] = bKey[i];
          //  printP(expandKey[2],4);
        for(int i=4; i<16;i++)
            expandKey[3][i%4] = bKey[i];
           // printP(expandKey[3],4);
        for(int i=0; i<20;i++)
            expandKey[4][i%4] = bKey[i];
           // printP(expandKey[4],4);
        for(int i=4; i<24;i++)
            expandKey[5][i%4] = bKey[i];
           // printP(expandKey[5],4);
        for(int i=0; i<28;i++)
            expandKey[6][i%4] = bKey[i];
           // printP(expandKey[6],4);
        for(int i=4; i<32;i++)
            expandKey[7][i%4] = bKey[i];
           // printP(expandKey[7],4);
        int r = 1;
        for(int i = 8; i<60; i++){
            if(i%4==0 && i%8!=0){
                expandKey[i][0] = (char)(sbox[expandKey[i-1][0]] ^ expandKey[i-8][0]);
                expandKey[i][1] = (char)(sbox[expandKey[i-1][1]] ^ expandKey[i-8][1]);
                expandKey[i][2] = (char)(sbox[expandKey[i-1][2]] ^ expandKey[i-8][2]);
                expandKey[i][3] = (char)(sbox[expandKey[i-1][3]] ^ expandKey[i-8][3]);
            }
            else if(i%8==0){
                expandKey[i][0] = (char)(sbox[expandKey[i-1][1]] ^ expandKey[i-8][0] ^ rcon[r]);
                expandKey[i][1] = (char)(sbox[expandKey[i-1][2]] ^ expandKey[i-8][1]);
                expandKey[i][2] = (char)(sbox[expandKey[i-1][3]] ^ expandKey[i-8][2]);
                expandKey[i][3] = (char)(sbox[expandKey[i-1][0]] ^ expandKey[i-8][3]);
                r+=1;
            } else {
                expandKey[i][0] = (char)(expandKey[i-1][0] ^ expandKey[i-8][0]);
                expandKey[i][1] = (char)(expandKey[i-1][1] ^ expandKey[i-8][1]);
                expandKey[i][2] = (char)(expandKey[i-1][2] ^ expandKey[i-8][2]);
                expandKey[i][3] = (char)(expandKey[i-1][3] ^ expandKey[i-8][3]);
            }
           // printP(expandKey[i],4);
        }
        int p = -1;
        int m = 0;
        for(int i = 0; i<60; i++){
            if(i%4==0){
                m = 0;
                p+=1;
            }
            for(int k =0; k<4; k++){
                finExKey[p][m] = expandKey[i][k];
                m+=1;
            }
        }
        for(int kok =0; kok<15; kok++){
            //printP(finExKey[kok],16);
        }
    }
    /*subByte takes a value in the array for encryption and substitutes it using the SBOX matrix*/
    static void subByte(){
        for(int i = 0; i<16; i++){
            finEncrypt[i] = sbox[finEncrypt[i]];
           // finEncrypt[i] = state[i];
        }
        
    }
    /*subByteD does the same as subByte but for decryption and uses the inverse SBOX*/
    static void subByteD(char[] state){
        for(int i = 0; i<16; i++){
            state[i] = rsbox[state[i]];
            finDecrypt[i] = state[i];
        }
    }
    /*shiftRows basically shuffles the encryption array for more security*/
    static void shiftRows(char[] state){
        char[] temp = new char[16];
        temp[0] = state[0];
        temp[1] = state[5];
        temp[2] = state[10];
        temp[3] = state[15];
        
        temp[4] = state[4];
        temp[5] = state[9];
        temp[6] = state[14];
        temp[7] = state[3];
        
        temp[8] = state[8];
        temp[9] = state[13];
        temp[10] = state[2];
        temp[11] = state[7];
        
        temp[12] = state[12];
        temp[13] = state[1];
        temp[14] = state[6];
        temp[15] = state[11];
        for(int i = 0; i<16; i++){
            finEncrypt[i] = temp[i];
        }
    }
    /*shiftRowsD unshuffles the decryption array to help uncover our data*/
    static void shiftRowsD(char[] state){
        char[] temp = new char[16];
        temp[0] = state[0];
        temp[1] = state[13];
        temp[2] = state[10];
        temp[3] = state[7];
        
        temp[4] = state[4];
        temp[5] = state[1];
        temp[6] = state[14];
        temp[7] = state[11];
        
        temp[8] = state[8];
        temp[9] = state[5];
        temp[10] = state[2];
        temp[11] = state[15];
        
        temp[12] = state[12];
        temp[13] = state[9];
        temp[14] = state[6];
        temp[15] = state[3];
        for(int i = 0; i<16; i++){
            state[i] = temp[i];
            finDecrypt[i] = temp[i];
        }
    }
    /*mixColumns achieves its task during encryption by using the Galois fields*/
    static void mixColumns(char[] state){
        char[] temp = new char[16];
        temp[0] = (char)(rMix2[state[0]]^rMix3[state[1]]^state[2]^state[3]);
        temp[1] = (char)(state[0]^rMix2[state[1]]^rMix3[state[2]]^state[3]);
        temp[2] = (char)(state[0]^state[1]^rMix2[state[2]]^rMix3[state[3]]);
        temp[3] = (char)(rMix3[state[0]]^state[1]^state[2]^rMix2[state[3]]);
        
        temp[4] = (char)(rMix2[state[4]]^rMix3[state[5]]^state[6]^state[7]);
        temp[5] = (char)(state[4]^rMix2[state[5]]^rMix3[state[6]]^state[7]);
        temp[6] = (char)(state[4]^state[5]^rMix2[state[6]]^rMix3[state[7]]);
        temp[7] = (char)(rMix3[state[4]]^state[5]^state[6]^rMix2[state[7]]);
        
        temp[8] = (char)(rMix2[state[8]]^rMix3[state[9]]^state[10]^state[11]);
        temp[9] = (char)(state[8]^rMix2[state[9]]^rMix3[state[10]]^state[11]);
        temp[10] = (char)(state[8]^state[9]^rMix2[state[10]]^rMix3[state[11]]);
        temp[11] = (char)(rMix3[state[8]]^state[9]^state[10]^rMix2[state[11]]);
        
        temp[12] = (char)(rMix2[state[12]]^rMix3[state[13]]^state[14]^state[15]);
        temp[13] = (char)(state[12]^rMix2[state[13]]^rMix3[state[14]]^state[15]);
        temp[14] = (char)(state[12]^state[13]^rMix2[state[14]]^rMix3[state[15]]);
        temp[15] = (char)(rMix3[state[12]]^state[13]^state[14]^rMix2[state[15]]);
        for(int i=0; i<16; i++){
            finEncrypt[i] = temp[i];
        }
    }
    /*mixColumnsD achieves its task during decryption by using the Galois fields*/
    static void mixColumnsD(char[] state){
        char[] temp = new char[16];
        temp[0] = (char)(rMix14[state[0]]^rMix11[state[1]]^rMix13[state[2]]^rMix9[state[3]]);
        temp[1] = (char)(rMix9[state[0]]^rMix14[state[1]]^rMix11[state[2]]^rMix13[state[3]]);
        temp[2] = (char)(rMix13[state[0]]^rMix9[state[1]]^rMix14[state[2]]^rMix11[state[3]]);
        temp[3] = (char)(rMix11[state[0]]^rMix13[state[1]]^rMix9[state[2]]^rMix14[state[3]]);
        
        temp[4] = (char)(rMix14[state[4]]^rMix11[state[5]]^rMix13[state[6]]^rMix9[state[7]]);
        temp[5] = (char)(rMix9[state[4]]^rMix14[state[5]]^rMix11[state[6]]^rMix13[state[7]]);
        temp[6] = (char)(rMix13[state[4]]^rMix9[state[5]]^rMix14[state[6]]^rMix11[state[7]]);
        temp[7] = (char)(rMix11[state[4]]^rMix13[state[5]]^rMix9[state[6]]^rMix14[state[7]]);
        
        temp[8] = (char)(rMix14[state[8]]^rMix11[state[9]]^rMix13[state[10]]^rMix9[state[11]]);
        temp[9] = (char)(rMix9[state[8]]^rMix14[state[9]]^rMix11[state[10]]^rMix13[state[11]]);
        temp[10] = (char)(rMix13[state[8]]^rMix9[state[9]]^rMix14[state[10]]^rMix11[state[11]]);
        temp[11] = (char)(rMix11[state[8]]^rMix13[state[9]]^rMix9[state[10]]^rMix14[state[11]]);
        
        temp[12] = (char)(rMix14[state[12]]^rMix11[state[13]]^rMix13[state[14]]^rMix9[state[15]]);
        temp[13] = (char)(rMix9[state[12]]^rMix14[state[13]]^rMix11[state[14]]^rMix13[state[15]]);
        temp[14] = (char)(rMix13[state[12]]^rMix9[state[13]]^rMix14[state[14]]^rMix11[state[15]]);
        temp[15] = (char)(rMix11[state[12]]^rMix13[state[13]]^rMix9[state[14]]^rMix14[state[15]]);
        for(int i=0; i<16; i++){
            finDecrypt[i] = temp[i];
        }
    }
    /*XOR with the round keys from expanded keys which are different for every round*/
    static void addRoundKey(int x){
       for(int i = 0; i<16; i++){
           finEncrypt[i] ^= finExKey[x][i];
        }
    }
    /*XOR with the round keys from expanded keys which are different for every round*/
    static void addRoundKeyD(int x){
        for(int i = 0; i<16; i++){
            finDecrypt[i] ^= finExKey[x][i];
        }
    }
    /*encryption function*/
    static void printP(char[] message, int rounds){
        for(int i = 0; i<rounds; i++){
            if((message[i]) <16){
                System.out.print("0");
            }
            System.out.print(Integer.toHexString((int)message[i]));
            System.out.print(".");
        }
        System.out.println();
    }
    static void encryptAES(char[] message){
        for(int i = 0; i<16; i++){
            finEncrypt[i] = message[i];
        }
        
        int x = 0;
        addRoundKey(x);
        //printP(finEncrypt,16);
        for(int i = 1; i<14; i++){
            subByte();
            //printP(finEncrypt,16);
            shiftRows(finEncrypt);
            //printP(finEncrypt,16);
            mixColumns(finEncrypt);
            //printP(finEncrypt,16);
            addRoundKey(i);
            printP(finEncrypt,16);
        }
        x = 14;
        subByte();
        //printP(finEncrypt,16);
        shiftRows(finEncrypt);
        //printP(finEncrypt,16);
        addRoundKey(x);
        printP(finEncrypt,16);
    }
    /*decryption function*/
    static void decryptAES(){
       for(int i = 0; i<16; i++){
            finDecrypt[i] = finEncrypt[i];
        }
        int x = 14;
        addRoundKeyD(x);
        for(int i = 13; i>0; i--){
            shiftRowsD(finDecrypt);
            subByteD(finDecrypt);
            addRoundKeyD(i);
            mixColumnsD(finDecrypt);
            printP(finDecrypt,16);
        }
        x = 0;
        shiftRowsD(finDecrypt);
        subByteD(finDecrypt);
        addRoundKeyD(x);
        printP(finDecrypt,16);
    }
    /*toHexKey converts text read from a file to HEX*/
    public static char[] toHexKey(char[] inPut, int rounds){
        char[] input7 = new char[64];
        int hj = 0;
        int tempo = 0;
        for(int i =0; i<rounds; i++){
            if(inPut[i] != '0' && inPut[i] != '1' && inPut[i] != '2' && inPut[i] != '3' && inPut[i] != '4' && inPut[i] != '5' && inPut[i] != '6' && inPut[i] != '7' &&inPut[i] != '8' && inPut[i] != '9' && inPut[i] != 'a' && inPut[i] != 'b' && inPut[i] != 'c' && inPut[i] != 'd' && inPut[i] != 'e' && inPut[i] != 'f' && inPut[i] != 'A' && inPut[i] != 'B' && inPut[i] != 'C' && inPut[i] != 'D' && inPut[i] != 'E' && inPut[i] != 'F'){
                System.out.println("Bad intput. Exiting.... ");
                System.exit(0);
            }
        }
        for(int i =0; i<rounds; i++){
            if(inPut[i] == '0'){
                tempo = 0;
            }else if(inPut[i] == '1'){
                tempo = 16;
            }else if(inPut[i] == '2'){
                tempo = 32;
            }else if(inPut[i] == '3'){
                tempo = 48;
            }else if(inPut[i] == '4'){
                tempo = 64;
            }else if(inPut[i] == '5'){
                tempo = 80;
            }else if(inPut[i] == '6'){
                tempo = 96;
            }else if(inPut[i] == '7'){
                tempo = 112;
            }else if(inPut[i] == '8'){
                tempo = 128;
            }else if(inPut[i] == '9'){
                tempo = 144;
            }else if(inPut[i] == 'A' || inPut[i] == 'a'){
                tempo = 160;
            }else if(inPut[i] == 'B' || inPut[i] == 'b'){
                tempo = 176;
            }else if(inPut[i] == 'C' || inPut[i] == 'c'){
                tempo = 192;
            }else if(inPut[i] == 'D' || inPut[i] == 'd'){
                tempo = 208;
            }else if(inPut[i] == 'E' || inPut[i] == 'e'){
                tempo = 224;
            }else if(inPut[i] == 'F' || inPut[i] == 'f'){
                tempo = 240;
            }
            if(inPut[i+1] =='0'){
                input7[hj] = (char)(tempo + 0);
            }else if(inPut[i+1] =='1'){
                input7[hj] = (char)(tempo + 1);
            }else if(inPut[i+1] =='2'){
                input7[hj] = (char)(tempo + 2);
            }else if(inPut[i+1] =='3'){
                input7[hj] = (char)(tempo + 3);
            }else if(inPut[i+1] =='4'){
                input7[hj] = (char)(tempo + 4);
            }else if(inPut[i+1] =='5'){
                input7[hj] = (char)(tempo + 5);
            }else if(inPut[i+1] =='6'){
                input7[hj] = (char)(tempo + 6);
            }else if(inPut[i+1] =='7'){
                input7[hj] = (char)(tempo + 7);
            }else if(inPut[i+1] =='8'){
                input7[hj] = (char)(tempo + 8);
            }else if(inPut[i+1] =='9'){
                input7[hj] = (char)(tempo + 9);
            }else if(inPut[i+1] =='A' || inPut[i+1] == 'a'){
                input7[hj] = (char)(tempo + 10);
            }else if(inPut[i+1] =='B' || inPut[i+1] == 'b'){
                input7[hj] = (char)(tempo + 11);
            }else if(inPut[i+1] =='C' || inPut[i+1] == 'c'){
                input7[hj] = (char)(tempo + 12);
            }else if(inPut[i+1] =='D' || inPut[i+1] == 'd'){
                input7[hj] = (char)(tempo + 13);
            }else if(inPut[i+1] =='E' || inPut[i+1] == 'e'){
                input7[hj] = (char)(tempo + 14);
            }else if(inPut[i+1] =='F' || inPut[i+1] == 'f'){
                input7[hj] = (char)(tempo + 15);
            }
            i+=1;
            hj+=1;
        }
        return input7;
    }
    public static void main(String args[]) throws IOException{
        int ko = 0;
        char[][] inPut = new char[32][64];
        char[][] inPut2 = new char[32][32];
        Scanner s = null;
	/*read from input file*/        
        char keyB[] = new char[64];
        try {
            s = new Scanner(new BufferedReader(new FileReader(args[1])));
            while (s.hasNext())
            {
                String str = s.next();
                inPut[ko] = str.toCharArray();
                ko +=1;
            }
        } finally {
            if (s != null) {
                s.close();
            }
        }
        for(int jo = 0; jo<ko; jo++){
            if(inPut[jo].length != 64){
                System.out.println("Bad input. exiting... ");
                System.exit(0);
            }
        }
        ko = 0;
        try {
            s = new Scanner(new BufferedReader(new FileReader(args[2])));
            while (s.hasNext())
            {
                String str = s.next();
                inPut2[ko] = str.toCharArray();
                ko +=1;
            }
        } finally {
            if (s != null) {
                s.close();
            }
        }
        for(int jo = 0; jo<ko; jo++){
            if(inPut2[jo].length != 32){
                System.out.println("Bad input. exiting... ");
                System.exit(0);
            }
        }
       
        char[][] input7 = new char[16][16];
        int keyNum = 64;
        char[] keyA = new char[keyNum];
        keyA = toHexKey(inPut[0],keyNum);
        //System.out.println("Key");
        //printP(keyA,32);
        int keyNum2 = 32;
        for(int i =0; i<ko; i++){
            input7[i] = toHexKey(inPut2[i],keyNum2);
        }

	/*Decryption sequence*/
        if(args[0].equals("d")){
           expandedKey(keyA);
           String goToD = args[2] + ".dec";
           BufferedWriter bout = new BufferedWriter(new FileWriter(goToD));
           String pop = "";
           for(int p=0; p<ko; p++){
       
           for(int i=0;i<16;i++){
                finEncrypt[i] = input7[p][i];
                
            }
            decryptAES();
            for(int j = 0; j<16; j++){
                if(finDecrypt[j]>=16){
                    pop = Integer.toHexString((int)finDecrypt[j]);
                    bout.write(pop.toUpperCase());
                }else{
                    bout.write("0");
                    pop = Integer.toHexString((int)finDecrypt[j]);
                    bout.write(pop.toUpperCase());
                }
            }
            bout.write("\n");
	   }
           bout.close();

	 /*Encryption sequence*/
         }else if(args[0].equals("e")){
            expandedKey(keyA);
            String goTo = args[2] + ".enc";
            BufferedWriter cout = new BufferedWriter(new FileWriter(goTo));
            String sos = "";
            for(int p=0; p<ko; p++){
                encryptAES(input7[p]);
                for(int j = 0; j<16; j++){
                    if(finEncrypt[j]>=16){
                        sos = Integer.toHexString((int)finEncrypt[j]);
                        cout.write(sos.toUpperCase());
                    }else{
                        sos = Integer.toHexString((int)finEncrypt[j]);
                        cout.write("0");
                        cout.write(sos.toUpperCase());
                     }
            	}
            	cout.write("\n");
	    }
            cout.close();
        }
    }
}

